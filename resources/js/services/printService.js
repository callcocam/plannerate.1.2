import domtoimage from 'dom-to-image';
import jsPDF from 'jspdf';

/**
 * Servi√ßo de impress√£o para planogramas
 * Permite capturar e imprimir m√≥dulos individuais ou planograma completo
 */
export class PrintService {
    constructor() {
        this.defaultConfig = {
            scale: 2, // Escala padr√£o para melhor qualidade
            format: 'A4', // A4, A3, custom
            orientation: 'landscape', // landscape, portrait
            margins: {
                top: 20,
                right: 20,
                bottom: 20,
                left: 20
            },
            quality: 0.95, // Qualidade da imagem (0-1)
            backgroundColor: '#ffffff'
        };
        
        // Cache para fluxo detectado - evita detec√ß√µes inconsistentes
        this._detectedFlow = null;
        this._flowDetectionTimestamp = null;
        this._flowCacheTimeout = 5000; // 5 segundos de cache
    }

    /**
     * Detecta automaticamente os m√≥dulos dispon√≠veis no planograma
     * Cada m√≥dulo √© composto por: cremalheira_esquerda + se√ß√£o + cremalheira_direita
     * @returns {Array} Lista de m√≥dulos COMPLETOS encontrados
     */
    detectModules() {
        console.log('=== INICIANDO DETEC√á√ÉO DE M√ìDULOS COMPLETOS ===');
        
        const modules = [];
        
        // Primeiro: detecta todas as se√ß√µes dispon√≠veis no planograma
        const sections = document.querySelectorAll('[data-section-id]');
        console.log(`üîç Encontradas ${sections.length} se√ß√µes no planograma`);
        
        // Filtrar se√ß√µes √∫nicas para evitar duplicatas
        const uniqueSections = [];
        const seenIds = new Set();
        
        sections.forEach(section => {
            const sectionId = section.getAttribute('data-section-id');
            if (!seenIds.has(sectionId)) {
                seenIds.add(sectionId);
                uniqueSections.push(section);
            }
        });
        
        console.log(`üîç Se√ß√µes √∫nicas ap√≥s filtro: ${uniqueSections.length}`);
        
        if (uniqueSections.length === 0) {
            console.warn('‚ùå Nenhuma se√ß√£o √∫nica encontrada no planograma!');
            return [];
        }
        
        
        // Detecta o fluxo da g√¥ndola
        const flow = this.detectGondolaFlow();
        console.log(`üåä Fluxo detectado: ${flow}`);
        
        // Segundo: para cada se√ß√£o √∫nica, monta o m√≥dulo completo
        uniqueSections.forEach((sectionElement, index) => {
            const sectionId = sectionElement.getAttribute('data-section-id');
            const sectionIndex = index; // √çndice da se√ß√£o (0-8)
            
            // Calcula o n√∫mero do m√≥dulo baseado no fluxo
            const moduleNumber = this.calculateModuleNumber(sectionIndex, uniqueSections.length, flow);
            
            console.log(`üîß Montando m√≥dulo ${moduleNumber} (se√ß√£o: ${sectionId}, √≠ndice: ${sectionIndex}, fluxo: ${flow})...`);
            
            try {
                // Busca cremalheira esquerda (√≠ndice atual)
                const cremalheiraEsquerda = document.querySelector(`[data-cremalheira-index="${sectionIndex}"]`);
                
                // Busca cremalheira direita (pr√≥ximo √≠ndice ou LastRack)
                let cremalheiraDireita;
                if (sectionIndex === uniqueSections.length - 1) {
                    // √öltimo m√≥dulo: usa LastRack como cremalheira direita
                    cremalheiraDireita = document.querySelector('[data-last-rack="true"] [data-cremalheira="true"]');
                    console.log(`üìç M√≥dulo ${moduleNumber}: Usando LastRack como cremalheira direita`);
                } else {
                    // M√≥dulos normais: usa pr√≥xima cremalheira
                    cremalheiraDireita = document.querySelector(`[data-cremalheira-index="${sectionIndex + 1}"]`);
                    console.log(`üìç M√≥dulo ${moduleNumber}: Usando cremalheira ${sectionIndex + 1} como direita`);
                }
                
                // Valida se encontrou todos os componentes necess√°rios
                if (!sectionElement) {
                    console.warn(`‚ùå M√≥dulo ${moduleNumber}: Se√ß√£o n√£o encontrada`);
                    return;
                }
                
                if (!cremalheiraEsquerda) {
                    console.warn(`‚ùå M√≥dulo ${moduleNumber}: Cremalheira esquerda (${sectionIndex}) n√£o encontrada`);
                    return;
                }
                
                if (!cremalheiraDireita) {
                    console.warn(`‚ùå M√≥dulo ${moduleNumber}: Cremalheira direita n√£o encontrada`);
                    return;
                }
                
                // Cria container virtual para o m√≥dulo completo
                const moduleContainer = this.createVirtualModuleContainer({
                    sectionId,
                    sectionIndex,
                    sectionElement,
                    cremalheiraEsquerda,
                    cremalheiraDireita
                });
                
                if (moduleContainer && this.isElementValid(moduleContainer)) {
                    const moduleData = {
                        id: sectionId,
                        name: `M√≥dulo ${moduleNumber}`,
                        element: moduleContainer,
                        moduleType: 'COMPLETE_MODULE',
                        hasCremalheira: true,
                        hasSection: true,
                        cremalheiraCount: 2, // Esquerda + direita
                        sectionCount: 1,
                        isValid: true,
                        sectionIndex: sectionIndex,
                        moduleNumber: moduleNumber,
                        flow: flow,
                        components: {
                            section: sectionElement,
                            cremalheiraEsquerda,
                            cremalheiraDireita
                        }
                    };
                    
                    modules.push(moduleData);
                    console.log(`‚úÖ M√≥dulo ${moduleNumber} criado com sucesso - Nome: "${moduleData.name}"`);
                } else {
                    console.warn(`‚ùå M√≥dulo ${moduleNumber}: Container virtual inv√°lido`);
                }
                
            } catch (error) {
                console.error(`‚ùå Erro ao montar m√≥dulo ${moduleNumber}:`, error);
            }
        });
        
        // SEMPRE ordena do M√≥dulo 1 para o √∫ltimo, independente do fluxo
        // O fluxo s√≥ afeta a posi√ß√£o f√≠sica, n√£o a ordem no relat√≥rio
        modules.sort((a, b) => a.moduleNumber - b.moduleNumber);
        
        if (flow === 'right_to_left') {
            console.log(`üîÑ Fluxo right_to_left: Relat√≥rio sempre M√≥dulo 1, 2, 3... (fisicamente: √∫ltimo, pen√∫ltimo, antepen√∫ltimo...)`);
        } else {
            console.log(`‚û°Ô∏è  Fluxo left_to_right: Relat√≥rio sempre M√≥dulo 1, 2, 3... (fisicamente: primeiro, segundo, terceiro...)`);
        }
        
        // Valida a consist√™ncia da detec√ß√£o
        const validation = this.validateModuleDetection(modules);
        
        if (!validation.isValid) {
            console.error('‚ùå Problemas cr√≠ticos na detec√ß√£o de m√≥dulos:', validation.issues);
        }
        
        if (validation.warnings.length > 0) {
            console.warn('‚ö†Ô∏è Avisos na detec√ß√£o de m√≥dulos:', validation.warnings);
        }
        
        console.log(`üéØ RESULTADO FINAL: ${modules.length} m√≥dulos completos detectados`);
        console.log(`üìã Ordem dos m√≥dulos:`, modules.map(m => `${m.name} (√≠ndice: ${m.sectionIndex})`));
        
        return modules;
    }

    /**
     * Detecta o fluxo da g√¥ndola baseado nos elementos do DOM
     * Usa cache para evitar detec√ß√µes inconsistentes
     * @returns {string} 'left_to_right' ou 'right_to_left'
     */
    detectGondolaFlow() {
        // Verifica se h√° cache v√°lido
        const now = Date.now();
        if (this._detectedFlow && this._flowDetectionTimestamp && 
            (now - this._flowDetectionTimestamp) < this._flowCacheTimeout) {
            console.log(`üîÑ Usando fluxo em cache: ${this._detectedFlow}`);
            return this._detectedFlow;
        }
        
        console.log('üîç Detectando fluxo da g√¥ndola...');
        
        // M√âTODO 1: Tenta encontrar o FlowIndicator no DOM
        const flowIndicator = document.querySelector('[class*="flow"]') || 
                             document.querySelector('[data-flow]') ||
                             document.querySelector('.flow-indicator');
        
        if (flowIndicator) {
            // Verifica se h√° seta para a direita (left_to_right)
            const rightArrow = flowIndicator.querySelector('[class*="arrow-right"]') || 
                              flowIndicator.querySelector('.arrow-right') ||
                              flowIndicator.querySelector('[data-arrow="right"]');
            
            // Verifica se h√° seta para a esquerda (right_to_left)
            const leftArrow = flowIndicator.querySelector('[class*="arrow-left"]') || 
                             flowIndicator.querySelector('.arrow-left') ||
                             flowIndicator.querySelector('[data-arrow="left"]');
            
            if (rightArrow && !leftArrow) {
                this._cacheFlow('left_to_right', 'seta direita encontrada');
                return this._detectedFlow;
            } else if (leftArrow && !rightArrow) {
                this._cacheFlow('right_to_left', 'seta esquerda encontrada');
                return this._detectedFlow;
            }
        }
        
        // M√âTODO 2: Verifica elementos com classes espec√≠ficas de fluxo
        const rightToLeftElements = document.querySelectorAll('[class*="right-to-left"], [class*="right_to_left"]');
        const leftToRightElements = document.querySelectorAll('[class*="left-to-right"], [class*="left_to_right"]');
        
        if (rightToLeftElements.length > leftToRightElements.length) {
            this._cacheFlow('right_to_left', 'elementos com classe right-to-left encontrados');
            return this._detectedFlow;
        } else if (leftToRightElements.length > rightToLeftElements.length) {
            this._cacheFlow('left_to_right', 'elementos com classe left-to-right encontrados');
            return this._detectedFlow;
        }
        
        // M√âTODO 3: An√°lise mais robusta do posicionamento das se√ß√µes
        const sections = document.querySelectorAll('[data-section-id]');
        if (sections.length > 1) {
            // Coleta posi√ß√µes de todas as se√ß√µes para an√°lise mais precisa
            const sectionPositions = Array.from(sections).map(section => {
                const rect = section.getBoundingClientRect();
                return {
                    element: section,
                    left: rect.left,
                    right: rect.right,
                    center: rect.left + (rect.width / 2)
                };
            });
            
            // Ordena por posi√ß√£o horizontal
            sectionPositions.sort((a, b) => a.left - b.left);
            
            // Analisa o padr√£o de posicionamento
            const firstSection = sectionPositions[0];
            const lastSection = sectionPositions[sectionPositions.length - 1];
            
            // Calcula a diferen√ßa de posi√ß√£o
            const positionDiff = lastSection.left - firstSection.left;
            
            // Se a diferen√ßa √© significativa e positiva, √© left_to_right
            if (positionDiff > 50) { // 50px de toler√¢ncia
                this._cacheFlow('left_to_right', 'posicionamento das se√ß√µes (an√°lise robusta)');
                return this._detectedFlow;
            } else if (positionDiff < -50) {
                this._cacheFlow('right_to_left', 'posicionamento das se√ß√µes (an√°lise robusta)');
                return this._detectedFlow;
            }
        }
        
        // M√âTODO 4: An√°lise de atributos data-section-id para determinar ordem
        const sectionIds = Array.from(sections).map(s => s.getAttribute('data-section-id'));
        if (sectionIds.length > 1) {
            // Se os IDs seguem um padr√£o sequencial, assume left_to_right
            const hasSequentialPattern = sectionIds.every((id, index) => {
                if (index === 0) return true;
                // Verifica se h√° algum padr√£o nos IDs
                return id && sectionIds[index - 1];
            });
            
            if (hasSequentialPattern) {
                this._cacheFlow('left_to_right', 'padr√£o sequencial dos IDs das se√ß√µes');
                return this._detectedFlow;
            }
        }
        
        // Padr√£o: left_to_right
        this._cacheFlow('left_to_right', 'padr√£o padr√£o (fallback)');
        return this._detectedFlow;
    }
    
    /**
     * Armazena o fluxo detectado no cache
     * @param {string} flow - Fluxo detectado
     * @param {string} method - M√©todo usado para detec√ß√£o
     */
    _cacheFlow(flow, method) {
        this._detectedFlow = flow;
        this._flowDetectionTimestamp = Date.now();
        console.log(`‚úÖ Fluxo detectado: ${flow} (${method})`);
        console.log(`üíæ Fluxo armazenado em cache por ${this._flowCacheTimeout}ms`);
    }
    
    /**
     * Limpa o cache de fluxo (√∫til para for√ßar nova detec√ß√£o)
     */
    clearFlowCache() {
        this._detectedFlow = null;
        this._flowDetectionTimestamp = null;
        console.log('üóëÔ∏è Cache de fluxo limpo');
    }
    
    /**
     * Valida a consist√™ncia da detec√ß√£o de m√≥dulos
     * @param {Array} modules - Array de m√≥dulos detectados
     * @returns {Object} Resultado da valida√ß√£o
     */
    validateModuleDetection(modules) {
        const validation = {
            isValid: true,
            issues: [],
            warnings: []
        };
        
        if (!modules || modules.length === 0) {
            validation.isValid = false;
            validation.issues.push('Nenhum m√≥dulo detectado');
            return validation;
        }
        
        // Verifica se todos os m√≥dulos t√™m elementos v√°lidos
        const invalidModules = modules.filter(module => !module.element || !this.isElementValid(module.element));
        if (invalidModules.length > 0) {
            validation.warnings.push(`${invalidModules.length} m√≥dulos com elementos inv√°lidos`);
        }
        
        // Verifica se h√° m√≥dulos duplicados
        const moduleIds = modules.map(m => m.id);
        const uniqueIds = [...new Set(moduleIds)];
        if (moduleIds.length !== uniqueIds.length) {
            validation.isValid = false;
            validation.issues.push('M√≥dulos duplicados detectados');
        }
        
        // Verifica se a numera√ß√£o dos m√≥dulos est√° correta
        const moduleNumbers = modules.map(m => m.moduleNumber).sort((a, b) => a - b);
        const expectedNumbers = Array.from({length: modules.length}, (_, i) => i + 1);
        const hasCorrectNumbering = moduleNumbers.every((num, index) => num === expectedNumbers[index]);
        
        if (!hasCorrectNumbering) {
            validation.warnings.push('Numera√ß√£o dos m√≥dulos pode estar incorreta');
        }
        
        // Verifica se todos os m√≥dulos t√™m o mesmo fluxo
        const flows = modules.map(m => m.flow);
        const uniqueFlows = [...new Set(flows)];
        if (uniqueFlows.length > 1) {
            validation.isValid = false;
            validation.issues.push('Fluxos inconsistentes detectados entre m√≥dulos');
        }
        
        console.log('üîç Valida√ß√£o de m√≥dulos:', validation);
        return validation;
    }

    /**
     * Calcula o n√∫mero do m√≥dulo baseado no fluxo da g√¥ndola
     * @param {number} sectionIndex - √çndice da se√ß√£o (0-8)
     * @param {number} totalSections - Total de se√ß√µes
     * @param {string} flow - Fluxo da g√¥ndola
     * @returns {number} N√∫mero do m√≥dulo (1-9)
     */
    calculateModuleNumber(sectionIndex, totalSections, flow) {
        if (flow === 'right_to_left') {
            // Fluxo da direita para esquerda: INVERTE a numera√ß√£o
            // Se√ß√£o 0 (direita) vira M√≥dulo 6, Se√ß√£o 1 vira M√≥dulo 5, etc.
            const moduleNumber = totalSections - sectionIndex;
            console.log(`üîÑ Fluxo right_to_left: Se√ß√£o ${sectionIndex} (direita) -> M√≥dulo ${moduleNumber} (INVERTIDO)`);
            return moduleNumber;
        } else {
            // Fluxo da esquerda para direita: N√ÉO inverte (numera√ß√£o normal)
            // Se√ß√£o 0 vira M√≥dulo 1, se√ß√£o 1 vira M√≥dulo 2, etc.
            const moduleNumber = sectionIndex + 1;
            console.log(`‚û°Ô∏è  Fluxo left_to_right: Se√ß√£o ${sectionIndex} (esquerda) -> M√≥dulo ${moduleNumber} (NORMAL)`);
            return moduleNumber;
        }
    }


    /**
     * Cria um container virtual otimizado para FlowIndicator + Planograma completo
     * @param {HTMLElement} flowIndicator - Elemento FlowIndicator
     * @param {HTMLElement} planogramContainer - Container do planograma
     * @returns {HTMLElement} Container virtual otimizado
     */
    createOptimizedPlanogramContainer(flowIndicator, planogramContainer) {
        console.log('üèóÔ∏è  Criando container otimizado para FlowIndicator + Planograma...');
        
        // Cria container virtual otimizado
        const container = document.createElement('div');
        container.setAttribute('data-virtual-planogram', 'true');
        container.className = 'virtual-planogram-container flex flex-col';
        
        // Clona os elementos
        const clonedFlowIndicator = flowIndicator.cloneNode(true);
        const clonedPlanogram = planogramContainer.cloneNode(true);
        
        // Ajusta estilos do FlowIndicator clonado para n√£o ter posicionamento absoluto
        const flowText = clonedFlowIndicator.querySelector('p');
        if (flowText) {
            flowText.style.position = 'relative';
            flowText.style.top = 'auto';
            flowText.style.left = 'auto';
            flowText.style.right = 'auto';
            flowText.style.marginBottom = '10px';
        }
        
        // Adiciona elementos na ordem correta
        container.appendChild(clonedFlowIndicator);
        container.appendChild(clonedPlanogram);
        
        // Calcula largura otimizada baseada no planograma
        const planogramWidth = planogramContainer.scrollWidth || planogramContainer.offsetWidth;
        const optimizedWidth = planogramWidth + 20; // +20px margem pequena
        
        // Aplica estilos para garantir dimens√µes corretas
        container.style.width = optimizedWidth + 'px';
        container.style.minWidth = optimizedWidth + 'px';
        container.style.maxWidth = optimizedWidth + 'px';
        container.style.height = 'auto';
        container.style.minHeight = '200px'; // Altura m√≠nima garantida
        
        // Posiciona temporariamente no DOM
        container.style.position = 'fixed';
        container.style.top = '0px';
        container.style.left = '0px';
        container.style.opacity = '0';
        container.style.visibility = 'visible';
        container.style.zIndex = '-1000';
        container.style.pointerEvents = 'none';
        container.style.transform = 'translateZ(0)';
        container.style.display = 'flex';
        container.style.flexDirection = 'column';
        
        document.body.appendChild(container);
        
        // Aguarda um momento para o DOM se ajustar
        setTimeout(() => {
            console.log(`‚úÖ Container otimizado criado: ${container.offsetWidth}x${container.offsetHeight}px`);
            console.log(`üìè Planograma original: ${planogramWidth}px, Otimizado: ${optimizedWidth}px`);
        }, 10);
        
        return container;
    }

    /**
     * Cria um container virtual que agrupa os componentes de um m√≥dulo completo
     * @param {Object} components - Componentes do m√≥dulo (se√ß√£o + cremaalheiras)
     * @returns {HTMLElement} Container virtual
     */
    createVirtualModuleContainer({ sectionId, sectionIndex, sectionElement, cremalheiraEsquerda, cremalheiraDireita }) {
        console.log(`üèóÔ∏è  Criando container virtual para m√≥dulo ${sectionIndex + 1}...`);
        
        // Cria um container div virtual
        const container = document.createElement('div');
        container.setAttribute('data-virtual-module', 'true');
        container.setAttribute('data-module-id', sectionId);
        container.setAttribute('data-module-index', sectionIndex);
        container.className = 'virtual-module-container flex items-center relative';
        
        // Clona os elementos para o container virtual
        const clonedCremalheiraEsquerda = cremalheiraEsquerda.cloneNode(true);
        const clonedSection = sectionElement.cloneNode(true);
        const clonedCremalheiraDireita = cremalheiraDireita.cloneNode(true);
        
        // Adiciona os componentes na ordem correta
        container.appendChild(clonedCremalheiraEsquerda);
        container.appendChild(clonedSection);
        container.appendChild(clonedCremalheiraDireita);
        
        // Adiciona temporariamente ao DOM para c√°lculos
        // Posiciona dentro da viewport mas invis√≠vel ao usu√°rio
        container.style.position = 'fixed';
        container.style.top = '0px';
        container.style.left = '0px';
        container.style.opacity = '0'; // Invis√≠vel ao usu√°rio
        container.style.visibility = 'visible'; // Vis√≠vel para captura
        container.style.zIndex = '-1000';
        container.style.pointerEvents = 'none'; // Evita interfer√™ncia
        container.style.transform = 'translateZ(0)'; // Force hardware acceleration
        document.body.appendChild(container);
        
        console.log(`‚úÖ Container virtual criado: ${container.offsetWidth}x${container.offsetHeight}px`);
        
        return container;
    }

    /**
     * Remove containers virtuais criados do DOM
     */
    cleanupVirtualContainers() {
        const virtualModules = document.querySelectorAll('[data-virtual-module="true"]');
        const virtualPlanograms = document.querySelectorAll('[data-virtual-planogram="true"]');
        
        [...virtualModules, ...virtualPlanograms].forEach(container => {
            if (container.parentNode) {
                container.parentNode.removeChild(container);
            }
        });
        
        const totalRemoved = virtualModules.length + virtualPlanograms.length;
        console.log(`üßπ Removidos ${totalRemoved} containers virtuais (${virtualModules.length} m√≥dulos + ${virtualPlanograms.length} planogramas)`);
    }

    /**
     * Detecta container principal para planograma completo
     * @returns {HTMLElement|null} Container principal ou null
     */
    detectPlanogramContainer() {
        console.log('=== DETECTANDO CONTAINER PRINCIPAL PARA PLANOGRAMA COMPLETO ===');
        
        // Seletores espec√≠ficos baseados na estrutura Vue real
        // PRIORIDADE M√ÅXIMA: Container que inclui FlowIndicator + Planograma
        const containerSelectors = [
            '.flex.flex-col.overflow-auto.relative.w-full', // ‚≠ê Container principal (Gondola.vue linha 13) - INCLUI FlowIndicator + Sections
            '#planogram-container-full', // Container espec√≠fico no Sections.vue (apenas m√≥dulos)
            '[ref="sectionsContainer"]', // Container espec√≠fico com ref do Sections.vue
            '.mt-28.flex.md\\\\:flex-row', // Container interno dos m√≥dulos (Sections.vue linha 5)
            '[style*="width: 3618px"]', // Container com largura espec√≠fica detectada
            '.flex.md\\\\:flex-row', // Container gen√©rico que tem os SectionWrapper + LastRack
        ];
        
        // Busca containers candidatos
        const candidates = [];
        
        containerSelectors.forEach(selector => {
            try {
                const elements = document.querySelectorAll(selector);
                console.log(`üîç Seletor "${selector}" encontrou ${elements.length} elementos`);
                
                elements.forEach(element => {
                    if (!candidates.includes(element)) {
                        candidates.push(element);
                    }
                });
            } catch (error) {
                console.warn(`‚ö†Ô∏è  Erro ao usar seletor "${selector}":`, error);
            }
        });
        
        console.log(`üìã Total de candidatos encontrados: ${candidates.length}`);
        
        // Avalia cada candidato
        let bestContainer = null;
        let bestScore = 0;
        
        candidates.forEach((element, index) => {
            try {
                const sectionCount = element.querySelectorAll('[data-section-id]').length;
                const cremalheiraCount = element.querySelectorAll('[data-cremalheira="true"]').length;
                const wrapperCount = element.querySelectorAll('.flex.items-center.relative').length;
                const lastRackCount = element.querySelectorAll('[data-last-rack="true"]').length;
                
                // Calcula pontua√ß√£o baseada na estrutura HTML real
                let score = 0;
                
                // üèÜ PRIORIDADE ABSOLUTA: Container que inclui FlowIndicator + Planograma
                // Busca pelo FlowIndicator usando seletores espec√≠ficos do FlowIndicator.vue
                const hasFlowIndicator = element.querySelector('p.flex.items-center.gap-1') || 
                                       element.querySelector('p:has(span:contains("Fluxo da g√¥ndola"))') ||
                                       element.querySelector('.flex.relative') ||
                                       // Busca por texto espec√≠fico
                                       (element.textContent && element.textContent.includes('Fluxo da g√¥ndola'));
                                       
                if (hasFlowIndicator && sectionCount >= 1) { // Relaxa requisito para testar
                    score += 1500; // Maior prioridade que container apenas com m√≥dulos
                    console.log(`üèÜ CONTAINER COMPLETO ENCONTRADO! FlowIndicator + ${sectionCount} se√ß√µes`);
                }
                
                // PRIORIDADE ALTA: ID espec√≠fico criado para captura (apenas m√≥dulos)
                else if (element.id === 'planogram-container-full') {
                    score += 1000;
                    console.log(`üéØ CONTAINER M√ìDULOS ENCONTRADO! ID: ${element.id}`);
                }
                
                // PRIORIDADE ALTA: Container com largura espec√≠fica de 3618px
                else if (element.offsetWidth >= 3600 && element.offsetWidth <= 3650) {
                    score += 200;
                    console.log(`üìê CONTAINER LARGURA IDEAL: ${element.offsetWidth}px`);
                }
                
                // Container deve ter TODOS os 9 m√≥dulos (se√ß√µes)
                if (sectionCount >= 9) score += sectionCount * 20;
                else if (sectionCount >= 7) score += sectionCount * 15;
                else if (sectionCount >= 5) score += sectionCount * 10;
                else if (sectionCount >= 2) score += sectionCount * 5;
                
                // Deve ter cremalheiras (9 m√≥dulos + 1 LastRack = 10 cremalheiras)
                if (cremalheiraCount >= 10) score += 50;
                else if (cremalheiraCount >= 9) score += 30;
                else if (cremalheiraCount >= 5) score += 15;
                else if (cremalheiraCount >= 1) score += 5;
                
                // Deve ter wrappers (SectionWrapper para cada m√≥dulo)
                if (wrapperCount >= 9) score += 40;
                else if (wrapperCount >= 7) score += 25;
                else if (wrapperCount >= 5) score += 10;
                else if (wrapperCount >= 1) score += 3;
                
                // Deve ter LastRack
                if (lastRackCount >= 1) score += 15;
                
                // B√¥nus por classes espec√≠ficas da estrutura real
                if (element.classList.contains('overflow-auto')) score += 10;
                if (element.classList.contains('relative')) score += 5;
                if (element.classList.contains('w-full')) score += 5;
                
                // √Årea deve ser suficiente para todos os m√≥dulos
                const area = element.offsetWidth * element.offsetHeight;
                if (area > 2000000) score += 50;
                else if (area > 1500000) score += 30;
                else if (area > 1000000) score += 20;
                else if (area > 500000) score += 10;
                else if (element.offsetWidth > 1000) score += 15;
                else if (element.offsetWidth > 500) score += 5;
                
                // Penaliza se for muito pequeno
                if (element.offsetWidth < 300 || element.offsetHeight < 100) score -= 50;
                
                // B√¥nus se cont√©m tanto m√≥dulos quanto LastRack (planograma completo)
                if (sectionCount >= 9 && lastRackCount >= 1) score += 50;
                else if (sectionCount >= 1 && lastRackCount >= 1) score += 25;
                
                // NOVO: B√¥nus por tipo de elemento (containers mais amplos)
                const tagName = element.tagName.toLowerCase();
                if (tagName === 'main') score += 40;
                else if (tagName === 'section') score += 20;
                else if (tagName === 'div' && element.className.includes('container')) score += 15;
                
                console.log(`üìä Candidato ${index + 1}:`, {
                    element: element.tagName + (element.className ? `.${element.className.split(' ').join('.')}` : ''),
                    tagName: tagName,
                    sectionCount,
                    cremalheiraCount, 
                    wrapperCount,
                    lastRackCount,
                    dimensions: `${element.offsetWidth}x${element.offsetHeight}`,
                    area: area,
                    score: score,
                    isVisible: this.isElementValid(element)
                });
                
                // Deve ser vis√≠vel e ter pontua√ß√£o m√≠nima
                if (score > bestScore && score >= 20 && this.isElementValid(element)) {
                    bestContainer = element;
                    bestScore = score;
                    console.log(`üèÜ Novo melhor candidato com pontua√ß√£o: ${score}`);
                }
                
            } catch (error) {
                console.error(`‚ùå Erro ao avaliar candidato ${index}:`, error);
            }
        });
        
        if (bestContainer) {
            console.log(`‚úÖ CONTAINER PRINCIPAL ENCONTRADO com pontua√ß√£o: ${bestScore}`);
            console.log(`üìê Dimens√µes finais: ${bestContainer.offsetWidth}x${bestContainer.offsetHeight}`);
            
            // Log adicional para debug
            const finalSectionCount = bestContainer.querySelectorAll('[data-section-id]').length;
            const finalCremalheiraCount = bestContainer.querySelectorAll('[data-cremalheira="true"]').length;
            const finalLastRackCount = bestContainer.querySelectorAll('[data-last-rack="true"]').length;
            const hasFlowIndicator = bestContainer.querySelector('p.flex.items-center.gap-1') || 
                                   (bestContainer.textContent && bestContainer.textContent.includes('Fluxo da g√¥ndola'));
            
            console.log(`üìà Container final cont√©m: ${finalSectionCount} se√ß√µes, ${finalCremalheiraCount} cremalheiras, ${finalLastRackCount} LastRacks`);
            
            // üéØ OTIMIZA√á√ÉO: Se detectou FlowIndicator + Planograma, cria container otimizado
            if (hasFlowIndicator && finalSectionCount >= 1) {
                console.log(`üéØ Detectado FlowIndicator + Planograma - Criando container otimizado...`);
                
                // Busca FlowIndicator e container do planograma separadamente
                let flowIndicator = bestContainer.querySelector('.flex.relative');
                
                // Se n√£o encontrou, busca por texto espec√≠fico
                if (!flowIndicator) {
                    const allDivs = bestContainer.querySelectorAll('div');
                    for (const div of allDivs) {
                        if (div.textContent && div.textContent.includes('Fluxo da g√¥ndola')) {
                            flowIndicator = div;
                            break;
                        }
                    }
                }
                
                const planogramContainer = bestContainer.querySelector('#planogram-container-full') || 
                                         bestContainer.querySelector('.mt-28.flex.md\\:flex-row');
                
                if (flowIndicator && planogramContainer) {
                    const optimizedContainer = this.createOptimizedPlanogramContainer(flowIndicator, planogramContainer);
                    console.log(`‚úÖ Container otimizado criado: ${optimizedContainer.offsetWidth}x${optimizedContainer.offsetHeight}px`);
                    return optimizedContainer;
                } else {
                    console.log(`‚ö†Ô∏è  N√£o foi poss√≠vel criar container otimizado - usando container original`);
                }
            }
            
            return bestContainer;
        }
        
        console.log('‚ùå NENHUM CONTAINER PRINCIPAL ADEQUADO ENCONTRADO');
        
        // Fallback: busca containers mais amplos que possam conter todo o planograma
        console.log('üîÑ Tentando fallback para containers mais amplos...');
        
        // Busca por containers que possam incluir TODO o planograma
        const fallbackSelectors = [
            'body', // Container mais amplo poss√≠vel
            '#app', // Container principal da aplica√ß√£o
            '[id*="app"]', // Qualquer elemento com "app" no ID
            '.app', // Classe app
            '.main-wrapper', // Wrapper principal
            '.content-wrapper', // Wrapper de conte√∫do
            'div[class*="wrapper"]', // Qualquer div com wrapper na classe
            'div[class*="container"]', // Qualquer div com container na classe
        ];
        
        for (const selector of fallbackSelectors) {
            try {
                const elements = document.querySelectorAll(selector);
                console.log(`üîÑ Fallback seletor "${selector}" encontrou ${elements.length} elementos`);
                
                for (const element of elements) {
                    const sectionCount = element.querySelectorAll('[data-section-id]').length;
                    const area = element.offsetWidth * element.offsetHeight;
                    
                    // Deve conter TODAS as 9 se√ß√µes e ter √°rea grande
                    if (sectionCount >= 9 && area > 1000000 && this.isElementValid(element)) {
                        console.log(`üÜò FALLBACK AMPLO: Container encontrado!`, {
                            selector: selector,
                            sectionCount: sectionCount,
                            dimensions: `${element.offsetWidth}x${element.offsetHeight}`,
                            area: area
                        });
                        return element;
                    }
                }
            } catch (error) {
                console.warn(`Erro no fallback seletor "${selector}":`, error);
            }
        }
        
        // √öltimo recurso: busca o container com MAIOR n√∫mero de se√ß√µes
        console.log('üîÑ √öltimo recurso: buscando container com mais se√ß√µes...');
        
        let bestFallback = null;
        let bestSectionCount = 0;
        
        const allElements = document.querySelectorAll('*');
        for (const element of allElements) {
            const sectionCount = element.querySelectorAll('[data-section-id]').length;
            const area = element.offsetWidth * element.offsetHeight;
            
            if (sectionCount > bestSectionCount && area > 500000 && this.isElementValid(element)) {
                bestFallback = element;
                bestSectionCount = sectionCount;
                
                console.log(`üîç Novo melhor fallback: ${sectionCount} se√ß√µes, ${element.offsetWidth}x${element.offsetHeight}`);
            }
        }
        
        if (bestFallback) {
            console.log(`üÜò √öLTIMO RECURSO: Container com ${bestSectionCount} se√ß√µes encontrado`);
            return bestFallback;
        }
        
        console.log('üí• TODOS OS FALLBACKS FALHARAM - Nenhum container adequado encontrado');
        return null;
    }

    /**
     * Extrai o nome do m√≥dulo de diferentes fontes
     * @param {HTMLElement} element - Elemento do m√≥dulo
     * @param {number} index - √çndice do m√≥dulo
     * @returns {string} Nome do m√≥dulo
     */
    extractModuleName(element, index) {
        // Tratamento especial para LastRack
        if (element.hasAttribute('data-last-rack')) {
            return 'Cremalheira Final';
        }
        
        // Lista de seletores para encontrar o nome do m√≥dulo
        const nameSelectors = [
            '.module-label',
            '.section-title',
            '.module-title',
            '.planogram-title',
            '[class*="title"]',
            '[class*="label"]',
            'h1, h2, h3, h4, h5, h6'
        ];

        for (const selector of nameSelectors) {
            try {
                const nameElement = element.querySelector(selector);
                if (nameElement) {
                    const text = (nameElement.textContent || nameElement.innerText || '').trim();
                    if (text && text.length > 0) {
                        return text;
                    }
                }
            } catch (error) {
                // Continua tentando outros seletores
            }
        }

        // Se n√£o encontrou nome espec√≠fico, tenta usar atributos
        const title = element.getAttribute('title') || 
                     element.getAttribute('data-title') || 
                     element.getAttribute('data-name');
        
        if (title && title.trim()) {
            return title.trim();
        }

        // Nome padr√£o
        return `M√ìDULO ${index + 1}`;
    }

    /**
     * Verifica se um elemento √© v√°lido para captura
     * @param {HTMLElement} element - Elemento a ser verificado
     * @returns {boolean} Se o elemento √© v√°lido
     */
    isElementValid(element) {
        // Tratamento especial para containers virtuais
        const isVirtualModule = element.hasAttribute('data-virtual-module');
        const isVirtualPlanogram = element.hasAttribute('data-virtual-planogram');
        
        if (isVirtualModule || isVirtualPlanogram) {
            // Containers virtuais sempre s√£o v√°lidos se t√™m dimens√µes
            const isValid = element.offsetWidth > 0 && element.offsetHeight > 0;
            console.log(`üîç Validando container virtual: ${isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'} (${element.offsetWidth}x${element.offsetHeight})`);
            return isValid;
        }

        // Verifica se o elemento est√° vis√≠vel
        const style = window.getComputedStyle(element);
        if (style.display === 'none' || 
            style.visibility === 'hidden' || 
            style.opacity === '0') {
            return false;
        }

        // Tratamento especial para LastRack - dimens√µes muito menores s√£o aceit√°veis
        const isLastRack = element.hasAttribute('data-last-rack');
        const minWidth = isLastRack ? 5 : 50;  // LastRack pode ser muito estreito (apenas cremalheira)
        const minHeight = isLastRack ? 100 : 50; // Mas deve ter altura m√≠nima

        // Verifica se tem tamanho m√≠nimo
        if (element.offsetWidth < minWidth || element.offsetHeight < minHeight) {
            return false;
        }

        // Verifica se n√£o √© um container pai demais
        const rect = element.getBoundingClientRect();
        const isInViewport = rect.top < window.innerHeight && rect.bottom > 0;
        
        return isInViewport || rect.width > 0; // Permite elementos fora da viewport se tiverem tamanho
    }

    /**
     * Calcula as dimens√µes reais do elemento considerando margens, padding e scroll
     * @param {HTMLElement} element - Elemento a ser analisado
     * @returns {Object} Dimens√µes reais { width, height, hasMargins, hasScroll }
     */
    calculateRealElementDimensions(element) {
        console.log('üîç Calculando dimens√µes reais do elemento...');
        
        const computedStyle = window.getComputedStyle(element);
        const rect = element.getBoundingClientRect();
        
        // Dimens√µes b√°sicas
        const offsetWidth = element.offsetWidth;
        const offsetHeight = element.offsetHeight;
        const scrollWidth = element.scrollWidth;
        const scrollHeight = element.scrollHeight;
        
        // Margens (especialmente importante para #planogram-container-full com mt-28)
        const marginTop = parseFloat(computedStyle.marginTop) || 0;
        const marginBottom = parseFloat(computedStyle.marginBottom) || 0;
        const marginLeft = parseFloat(computedStyle.marginLeft) || 0;
        const marginRight = parseFloat(computedStyle.marginRight) || 0;
        
        // Padding
        const paddingTop = parseFloat(computedStyle.paddingTop) || 0;
        const paddingBottom = parseFloat(computedStyle.paddingBottom) || 0;
        const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;
        const paddingRight = parseFloat(computedStyle.paddingRight) || 0;
        
        // üéØ CORRE√á√ÉO ESPECIAL para containers de planograma
        const isMainPlanogramContainer = element.id === 'planogram-container-full';
        const hasFlowIndicator = element.querySelector('p.flex.items-center.gap-1') || 
                                (element.textContent && element.textContent.includes('Fluxo da g√¥ndola'));
        const isCompleteContainer = hasFlowIndicator && element.querySelectorAll('[data-section-id]').length >= 1;
        
        let finalWidth = offsetWidth;
        let finalHeight = offsetHeight;
        
        // Se o elemento tem scroll content maior que o vis√≠vel, usa scrollHeight/scrollWidth
        if (scrollWidth > offsetWidth) {
            finalWidth = scrollWidth;
            console.log(`üìè Usando scrollWidth: ${scrollWidth}px (era ${offsetWidth}px)`);
        }
        
        if (scrollHeight > offsetHeight) {
            finalHeight = scrollHeight;
            console.log(`üìè Usando scrollHeight: ${scrollHeight}px (era ${offsetHeight}px)`);
        }
        
        // Para containers de planograma, inclui as margens no c√°lculo
        if (isMainPlanogramContainer || isCompleteContainer) {
            // Adiciona margens √†s dimens√µes finais para garantir captura completa
            finalHeight += marginTop + marginBottom;
            
            // üéØ CORRE√á√ÉO: Para containers completos, ajusta largura baseada no conte√∫do real
            if (isCompleteContainer) {
                // Busca o container interno com os m√≥dulos para obter largura real
                const planogramContainer = element.querySelector('#planogram-container-full') || 
                                         element.querySelector('.mt-28.flex.md\\:flex-row');
                
                if (planogramContainer) {
                    const realPlanogramWidth = planogramContainer.scrollWidth || planogramContainer.offsetWidth;
                    // Adiciona margem lateral pequena para o FlowIndicator
                    finalWidth = Math.min(finalWidth, realPlanogramWidth + 100); // +100px para FlowIndicator
                    console.log(`üéØ Ajustando largura: ${finalWidth}px (planograma: ${realPlanogramWidth}px + 100px margem)`);
                } else {
                    finalWidth += marginLeft + marginRight;
                }
            } else {
                finalWidth += marginLeft + marginRight;
            }
            
            const containerType = isCompleteContainer ? 'COMPLETO (FlowIndicator + M√≥dulos)' : 'M√ìDULOS (#planogram-container-full)';
            console.log(`üéØ Container ${containerType} detectado:`);
            console.log(`   - Margem superior: ${marginTop}px`);
            console.log(`   - Margem inferior: ${marginBottom}px`);
            console.log(`   - Altura original: ${offsetHeight}px`);
            console.log(`   - Altura com margens: ${finalHeight}px`);
            console.log(`   - Largura ajustada: ${finalWidth}px`);
            if (isCompleteContainer) {
                console.log(`   - ‚úÖ Inclui FlowIndicator na captura`);
                console.log(`   - üéØ Largura otimizada para evitar espa√ßo vazio`);
            }
        }
        
        // Inclui padding se necess√°rio para containers com conte√∫do interno
        const hasPadding = paddingTop > 0 || paddingBottom > 0 || paddingLeft > 0 || paddingRight > 0;
        if (hasPadding && !isMainPlanogramContainer && !isCompleteContainer) {
            finalHeight += paddingTop + paddingBottom;
            finalWidth += paddingLeft + paddingRight;
            console.log(`üì¶ Incluindo padding: +${paddingTop + paddingBottom}px altura, +${paddingLeft + paddingRight}px largura`);
        }
        
        const result = {
            width: Math.max(finalWidth, offsetWidth), // Nunca menor que offset
            height: Math.max(finalHeight, offsetHeight), // Nunca menor que offset
            originalWidth: offsetWidth,
            originalHeight: offsetHeight,
            scrollWidth: scrollWidth,
            scrollHeight: scrollHeight,
            margins: { top: marginTop, bottom: marginBottom, left: marginLeft, right: marginRight },
            padding: { top: paddingTop, bottom: paddingBottom, left: paddingLeft, right: paddingRight },
            hasMargins: marginTop > 0 || marginBottom > 0 || marginLeft > 0 || marginRight > 0,
            hasScroll: scrollWidth > offsetWidth || scrollHeight > offsetHeight,
            isPlanogramContainer: isMainPlanogramContainer,
            isCompleteContainer: isCompleteContainer,
            hasFlowIndicator: hasFlowIndicator
        };
        
        console.log('üìä Dimens√µes calculadas:', result);
        return result;
    }

    /**
     * Captura um elemento espec√≠fico como imagem
     * @param {HTMLElement} element - Elemento a ser capturado
     * @param {Object} config - Configura√ß√µes de captura
     * @returns {Promise<string>} Data URL da imagem capturada
     */
    async captureElement(element, config = {}) {
        const finalConfig = { ...this.defaultConfig, ...config };
        
        console.log('Iniciando captura do elemento:', element);
        
        // üéØ CORRE√á√ÉO: Calcula dimens√µes reais considerando margens e scroll
        const realDimensions = this.calculateRealElementDimensions(element);
        console.log('Dimens√µes reais do elemento:', realDimensions);
        
        try {
            // Garante que o elemento est√° vis√≠vel
            this.ensureElementVisible(element);
            
            // Remove elementos desnecess√°rios temporariamente
            const elementsToHide = this.hideUIElements(element);
            
            // Aguarda um pequeno delay para garantir que o DOM se estabilize
            await this.wait(100);
            
            // Configura√ß√µes do dom-to-image com tratamento melhorado
            const options = {
                quality: finalConfig.quality,
                bgcolor: finalConfig.backgroundColor,
                width: realDimensions.width * finalConfig.scale,
                height: realDimensions.height * finalConfig.scale,
                style: {
                    transform: `scale(${finalConfig.scale})`,
                    transformOrigin: 'top left',
                    width: realDimensions.width + 'px',
                    height: realDimensions.height + 'px',
                    // üéØ CONFIGURA√á√ÉO ANTI-QUEBRA DE LINHA
                    whiteSpace: 'nowrap',
                    overflow: 'visible',
                    textOverflow: 'visible'
                },
                useCORS: true,
                allowTaint: true,
                // Filtro melhorado para lidar com imagens problem√°ticas e evitar quebra de linha
                filter: (node) => {
                    // Aplica configura√ß√£o anti-quebra em elementos de texto
                    if (node.textContent && node.textContent.trim() && node.style) {
                        node.style.whiteSpace = 'nowrap';
                        node.style.overflow = 'visible';
                        node.style.textOverflow = 'visible';
                    }
                    
                    if (node.tagName === 'IMG') {
                        const src = node.src || '';
                        // Lista de dom√≠nios problem√°ticos
                        const problematicDomains = [
                            // 'digitaloceanspaces.com',
                            // 'amazonaws.com',
                            // 'cloudflare.com'
                        ];
                        
                        if (problematicDomains.some(domain => src.includes(domain))) {
                            console.log('Ignorando imagem problem√°tica:', src);
                            return false;
                        }
                    }
                    
                    // Ignora elementos completamente transparentes ou invis√≠veis
                    if (node.style) {
                        const opacity = node.style.opacity;
                        const display = node.style.display;
                        if (opacity === '0' || display === 'none') {
                            return false;
                        }
                    }
                    
                    return true;
                }
            };

            console.log('Configura√ß√µes de captura:', options);

            // Captura a imagem
            const dataUrl = await domtoimage.toPng(element, options);
            
            console.log('Captura realizada com sucesso');
            
            // Restaura elementos escondidos
            this.showUIElements(elementsToHide);
            
            return dataUrl;
        } catch (error) {
            console.error('Erro ao capturar elemento:', error);
            console.log('Tentando captura alternativa...');
            
            // Tenta captura alternativa sem imagens problem√°ticas
            try {
                const elementsToHide = this.hideUIElements(element);
                
                // Remove todas as imagens externas temporariamente
                const problematicImages = this.hideProblematicImages(element);

                const fallbackOptions = {
                    quality: Math.max(finalConfig.quality - 0.1, 0.7),
                    bgcolor: finalConfig.backgroundColor,
                    width: realDimensions.width * (finalConfig.scale * 0.8),
                    height: realDimensions.height * (finalConfig.scale * 0.8),
                    style: {
                        transform: `scale(${finalConfig.scale * 0.8})`,
                        transformOrigin: 'top left',
                        width: realDimensions.width + 'px',
                        height: realDimensions.height + 'px',
                        // üéØ CONFIGURA√á√ÉO ANTI-QUEBRA DE LINHA (FALLBACK)
                        whiteSpace: 'nowrap',
                        overflow: 'visible',
                        textOverflow: 'visible'
                    },
                    useCORS: false,
                    allowTaint: false,
                    // Aplica mesma configura√ß√£o anti-quebra do m√©todo principal
                    filter: (node) => {
                        // Aplica configura√ß√£o anti-quebra em elementos de texto
                        if (node.textContent && node.textContent.trim() && node.style) {
                            node.style.whiteSpace = 'nowrap';
                            node.style.overflow = 'visible';
                            node.style.textOverflow = 'visible';
                        }
                        
                        // Ignora elementos completamente transparentes ou invis√≠veis
                        if (node.style) {
                            const opacity = node.style.opacity;
                            const display = node.style.display;
                            if (opacity === '0' || display === 'none') {
                                return false;
                            }
                        }
                        
                        return true;
                    }
                };

                console.log('Tentativa de fallback com op√ß√µes:', fallbackOptions);
                const dataUrl = await domtoimage.toPng(element, fallbackOptions);
                
                // Restaura elementos
                this.showUIElements(elementsToHide);
                this.showUIElements(problematicImages);
                
                console.log('Captura de fallback bem-sucedida');
                return dataUrl;
            } catch (fallbackError) {
                console.error('Erro na captura de fallback:', fallbackError);
                throw new Error(`Falha na captura do m√≥dulo: ${fallbackError.message || 'Erro desconhecido'}`);
            }
        }
    }

    /**
     * Garante que o elemento esteja vis√≠vel para captura
     * @param {HTMLElement} element - Elemento a ser tornado vis√≠vel
     */
    ensureElementVisible(element) {
        // Se o elemento n√£o est√° na viewport, rola para ele
        const rect = element.getBoundingClientRect();
        const isInViewport = rect.top >= 0 && rect.bottom <= window.innerHeight;
        
        if (!isInViewport) {
            element.scrollIntoView({ behavior: 'auto', block: 'center' });
        }

        // For√ßa visibilidade se necess√°rio (temporariamente)
        const originalStyle = {
            visibility: element.style.visibility,
            display: element.style.display,
            opacity: element.style.opacity
        };

        if (element.style.visibility === 'hidden') element.style.visibility = 'visible';
        if (element.style.display === 'none') element.style.display = 'block';
        if (element.style.opacity === '0') element.style.opacity = '1';
        
        // Para containers virtuais, for√ßa opacidade total durante captura
        if (element.hasAttribute('data-virtual-module')) {
            element.style.opacity = '1';
        }

        // Armazena estilo original para restaurar depois
        element._originalCaptureStyle = originalStyle;
    }

    /**
     * Esconde imagens problem√°ticas para captura
     * @param {HTMLElement} container - Container principal
     * @returns {Array} Imagens que foram escondidas
     */
    hideProblematicImages(container) {
        const hiddenImages = [];
        const images = container.querySelectorAll('img');
        
        images.forEach(img => {
            const src = img.src || '';
            const problematicDomains = [
                'digitaloceanspaces.com',
                'amazonaws.com',
                'cloudfront.net',
                'cloudflare.com'
            ];
            
            if (problematicDomains.some(domain => src.includes(domain))) {
                hiddenImages.push({
                    element: img,
                    originalDisplay: img.style.display,
                    originalVisibility: img.style.visibility
                });
                img.style.display = 'none';
            }
        });
        
        return hiddenImages;
    }

    /**
     * Aguarda um tempo espec√≠fico
     * @param {number} ms - Milissegundos para aguardar
     */
    async wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * Captura m√∫ltiplos m√≥dulos ou planograma completo
     * @param {Array} moduleIds - IDs dos m√≥dulos a serem capturados ou ['all'] para planograma completo
     * @param {Object} config - Configura√ß√µes de captura
     * @returns {Promise<Array>} Array de imagens capturadas
     */
    async captureModules(moduleIds, config = {}) {
        console.log('=== INICIANDO CAPTURA DE M√ìDULOS ===');
        console.log('IDs solicitados:', moduleIds);
        
        // Limpa cache de fluxo antes da captura para garantir detec√ß√£o atualizada
        this.clearFlowCache();
        
        let selectedModules = [];
        
        // L√ìGICA SEPARADA: Planograma Completo vs M√≥dulos Individuais
        if (moduleIds.includes('all')) {
            console.log('üéØ MODO: PLANOGRAMA COMPLETO');
            
            // Detecta container principal para planograma completo
            const planogramContainer = this.detectPlanogramContainer();
            
            if (planogramContainer) {
                selectedModules = [{
                    element: planogramContainer,
                    name: 'PLANOGRAMA COMPLETO',
                    id: 'planogram-complete',
                    index: 0,
                    moduleType: 'PLANOGRAM_COMPLETE',
                    isComplete: true
                }];
                
                console.log('‚úÖ Container principal encontrado para planograma completo');
                console.log(`üìê Dimens√µes: ${planogramContainer.offsetWidth}x${planogramContainer.offsetHeight}`);
            } else {
                console.log('‚ùå Container principal n√£o encontrado');
                console.log('üîÑ FALLBACK: Tentando capturar todos os m√≥dulos individuais');
                
                // Fallback: captura todos os m√≥dulos individuais
                const individualModules = this.detectModules();
                if (individualModules.length > 0) {
                    selectedModules = individualModules;
                    console.log(`üÜò Usando ${individualModules.length} m√≥dulos individuais como fallback`);
                } else {
                    throw new Error('Nenhum m√≥dulo ou container principal encontrado para captura');
                }
            }
        } else {
            console.log('üéØ MODO: M√ìDULOS INDIVIDUAIS');
            
            // Detecta m√≥dulos individuais
            const availableModules = this.detectModules();
            console.log(`üìã M√≥dulos dispon√≠veis: ${availableModules.length}`);
            
            if (availableModules.length === 0) {
                throw new Error('Nenhum m√≥dulo individual detectado');
            }
            
            // Filtra m√≥dulos selecionados
            selectedModules = availableModules.filter(module => moduleIds.includes(module.id));
            
            if (selectedModules.length === 0) {
                console.warn('‚ö†Ô∏è  Nenhum m√≥dulo correspondente aos IDs solicitados');
                console.log('IDs dispon√≠veis:', availableModules.map(m => m.id));
                throw new Error(`M√≥dulos n√£o encontrados. IDs solicitados: ${moduleIds.join(', ')}`);
            }
            
            console.log(`‚úÖ ${selectedModules.length} m√≥dulos selecionados para captura`);
        }
        
        // PROCESSO DE CAPTURA
        console.log(`üöÄ Iniciando captura de ${selectedModules.length} elemento(s)`);
        const captures = [];
        
        for (let i = 0; i < selectedModules.length; i++) {
            const module = selectedModules[i];
            const progressMsg = `Capturando ${i + 1}/${selectedModules.length}: ${module.name}`;
            console.log(`üì∏ ${progressMsg}`);
            
            try {
                // Valida√ß√£o adicional antes da captura
                if (!module.element) {
                    throw new Error('Elemento n√£o encontrado');
                }
                
                // Para containers virtuais, aguarda um momento para renderiza√ß√£o
                if (module.element.hasAttribute('data-virtual-planogram')) {
                    console.log('üîÑ Aguardando renderiza√ß√£o do container virtual...');
                    await this.wait(200); // Aguarda 200ms para renderiza√ß√£o
                }
                
                if (!this.isElementValid(module.element)) {
                    throw new Error('Elemento inv√°lido ou n√£o vis√≠vel');
                }
                
                // Captura a imagem
                const imageData = await this.captureElement(module.element, config);
                
                if (!imageData) {
                    throw new Error('Captura retornou dados vazios');
                }
                
                captures.push({
                    id: module.id,
                    name: module.name,
                    imageData: imageData,
                    element: module.element,
                    moduleType: module.moduleType || 'UNKNOWN',
                    capturedAt: new Date().toISOString()
                });
                
                console.log(`‚úÖ ${module.name} capturado com sucesso (${imageData.length} bytes)`);
                
            } catch (error) {
                console.error(`‚ùå Erro ao capturar ${module.name}:`, error);
                
                // Adiciona entrada de erro para manter consist√™ncia
                captures.push({
                    id: module.id,
                    name: `${module.name} (ERRO)`,
                    imageData: null,
                    element: module.element,
                    moduleType: module.moduleType || 'UNKNOWN',
                    error: error.message,
                    capturedAt: new Date().toISOString()
                });
            }
        }
        
        // RESULTADO FINAL
        const successfulCaptures = captures.filter(c => c.imageData !== null);
        const failedCaptures = captures.filter(c => c.imageData === null);
        
        console.log(`üéØ CAPTURA CONCLU√çDA:`);
        console.log(`‚úÖ Sucessos: ${successfulCaptures.length}`);
        console.log(`‚ùå Falhas: ${failedCaptures.length}`);
        console.log(`üìä Total processado: ${captures.length}`);
        
        if (failedCaptures.length > 0) {
            console.warn('‚ö†Ô∏è  M√≥dulos com falha:', failedCaptures.map(c => c.name));
        }
        
        // Limpa containers virtuais criados
        this.cleanupVirtualContainers();
        
        return captures;
    }

    /**
     * Gera PDF com as imagens capturadas
     * @param {Array} captures - Imagens capturadas
     * @param {Object} config - Configura√ß√µes do PDF
     * @returns {Promise<jsPDF>} Documento PDF gerado
     */
    async generatePDF(captures, config = {}) {
        const finalConfig = { ...this.defaultConfig, ...config };
        
        console.log('Gerando PDF com', captures.length, 'capturas');
        
        // Configura√ß√µes do PDF baseadas no formato
        const pdfConfig = this.getPDFDimensions(finalConfig.format, finalConfig.orientation);
        const pdf = new jsPDF({
            orientation: finalConfig.orientation,
            unit: 'mm',
            format: finalConfig.format.toLowerCase()
        });

        // Remove a primeira p√°gina em branco
        let isFirstPage = true;

        for (let i = 0; i < captures.length; i++) {
            const capture = captures[i];
            console.log(`üìÑ Adicionando p√°gina ${i + 1}: "${capture.name}" (ID: ${capture.id})`);
            
            if (!isFirstPage) {
                pdf.addPage();
            }
            isFirstPage = false;

            // Adiciona t√≠tulo do m√≥dulo
            pdf.setFontSize(16);
            pdf.setFont(undefined, 'bold');
            console.log(`üìù Escrevendo t√≠tulo no PDF: "${capture.name}"`);
            pdf.text(capture.name, finalConfig.margins.left, finalConfig.margins.top);

            // Se houve erro na captura, adiciona mensagem de erro
            if (capture.error || !capture.imageData) {
                pdf.setFontSize(12);
                pdf.setFont(undefined, 'normal');
                const errorMsg = capture.error || 'Erro desconhecido ao capturar m√≥dulo';
                pdf.text(`Erro: ${errorMsg}`, finalConfig.margins.left, finalConfig.margins.top + 10);
                continue;
            }

            try {
            // Calcula dimens√µes para ajustar a imagem na p√°gina
            const availableWidth = pdfConfig.width - finalConfig.margins.left - finalConfig.margins.right;
                const availableHeight = pdfConfig.height - finalConfig.margins.top - finalConfig.margins.bottom - 15; // 15mm para t√≠tulo e espa√ßamento

            // Cria uma nova imagem para obter dimens√µes
            const img = new Image();
            await new Promise((resolve, reject) => {
                img.onload = resolve;
                img.onerror = reject;
                img.src = capture.imageData;
            });

            // Calcula escala para ajustar na p√°gina mantendo propor√ß√£o
                const pixelToMM = 0.264583; // Convers√£o px para mm
                const scaleX = availableWidth / (img.width * pixelToMM);
                const scaleY = availableHeight / (img.height * pixelToMM);
                const scale = Math.min(scaleX, scaleY, 1); // N√£o aumenta al√©m do tamanho original

                const finalWidth = (img.width * pixelToMM) * scale;
                const finalHeight = (img.height * pixelToMM) * scale;

            // Centraliza a imagem
            const x = finalConfig.margins.left + (availableWidth - finalWidth) / 2;
                const y = finalConfig.margins.top + 15; // 15mm abaixo do t√≠tulo

                console.log(`Dimens√µes da imagem no PDF: ${finalWidth}x${finalHeight}mm na posi√ß√£o ${x},${y}`);

            pdf.addImage(
                capture.imageData,
                'PNG',
                x,
                y,
                finalWidth,
                finalHeight
            );
            } catch (error) {
                console.error(`Erro ao adicionar imagem ao PDF para ${capture.name}:`, error);
                // Adiciona mensagem de erro no PDF
                pdf.setFontSize(12);
                pdf.setFont(undefined, 'normal');
                pdf.text(`Erro ao processar imagem: ${error.message}`, finalConfig.margins.left, finalConfig.margins.top + 15);
            }
        }

        console.log('PDF gerado com sucesso');
        return pdf;
    }

    /**
     * Imprime diretamente no navegador
     * @param {Array} captures - Imagens capturadas
     * @param {Object} config - Configura√ß√µes de impress√£o
     */
    async printDirect(captures, config = {}) {
        console.log('Iniciando impress√£o direta de', captures.length, 'm√≥dulos');
        
        const printWindow = window.open('', '_blank');
        if (!printWindow) {
            throw new Error('N√£o foi poss√≠vel abrir janela de impress√£o. Verifique se pop-ups est√£o bloqueados.');
        }

        const finalConfig = { ...this.defaultConfig, ...config };
        
        // Gera HTML para impress√£o
        let htmlContent = `
            <!DOCTYPE html>
            <html>
            <head>
                <title>Impress√£o do Planograma</title>
                <style>
                    @page {
                        size: ${finalConfig.format.toLowerCase()} ${finalConfig.orientation};
                        margin: ${finalConfig.margins.top}mm ${finalConfig.margins.right}mm ${finalConfig.margins.bottom}mm ${finalConfig.margins.left}mm;
                    }
                    body {
                        margin: 0;
                        padding: 0;
                        font-family: Arial, sans-serif;
                        background: white;
                    }
                    .module-page {
                        page-break-after: always;
                        text-align: center;
                        background: white;
                        min-height: auto;
                        display: flex;
                        flex-direction: column;
                        justify-content: flex-start;
                        align-items: center;
                        padding: 10mm;
                        height: fit-content;
                    }
                    .module-page:last-child {
                        page-break-after: avoid;
                        min-height: auto;
                    }
                    .module-title {
                        font-size: 18px;
                        font-weight: bold;
                        margin-bottom: 15px;
                        color: #333;
                        text-align: center;
                    }
                    .module-image {
                        max-width: 100%;
                        max-height: 80vh;
                        height: auto;
                        border: 1px solid #ddd;
                        border-radius: 4px;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                    .error-message {
                        color: #d32f2f;
                        font-size: 14px;
                        text-align: center;
                        margin-top: 20px;
                        padding: 10px;
                        border: 1px solid #d32f2f;
                        border-radius: 4px;
                        background-color: #ffebee;
                    }
                    @media print {
                        .module-page {
                            page-break-after: always;
                            min-height: auto !important;
                            height: auto !important;
                        }
                        .module-page:last-child {
                            page-break-after: avoid !important;
                        }
                        body {
                            print-color-adjust: exact;
                            -webkit-print-color-adjust: exact;
                            margin: 0 !important;
                            padding: 0 !important;
                        }
                        @page {
                            margin: 10mm;
                            size: auto;
                        }
                    }
                </style>
            </head>
            <body>
        `;

        captures.forEach((capture, index) => {
            htmlContent += `<div class="module-page">`;
            htmlContent += `<h1 class="module-title">${capture.name}</h1>`;
            
            if (capture.imageData && !capture.error) {
                htmlContent += `<img src="${capture.imageData}" alt="${capture.name}" class="module-image" />`;
            } else {
                const errorMsg = capture.error || 'Erro desconhecido ao capturar m√≥dulo';
                htmlContent += `<div class="error-message">Erro: ${errorMsg}</div>`;
            }
            
            htmlContent += `</div>`;
        });

        htmlContent += `</body></html>`;

        printWindow.document.write(htmlContent);
        printWindow.document.close();

        // Aguarda o carregamento das imagens antes de imprimir
        setTimeout(() => {
            printWindow.focus();
            printWindow.print();
            
            // Fecha a janela ap√≥s impress√£o (opcional)
            setTimeout(() => {
            printWindow.close();
        }, 1000);
        }, 2000); // Aumentado o tempo para garantir carregamento completo
    }

    /**
     * Remove elementos desnecess√°rios da UI durante a captura
     * @param {HTMLElement} container - Container principal
     * @returns {Array} Elementos que foram escondidos
     */
    hideUIElements(container) {
        const elementsToHide = [];
        
        // Lista expandida de elementos para esconder durante captura
        const hideSelectors = [
            '.opacity-0',
            '.group-hover\\:opacity-100',
            '[class*="hover:"]',
            '.context-menu',
            '.tooltip',
            '.popover',
            '.modal',
            '.dropdown',
            '.overlay',
            '[aria-hidden="true"]',
            '.hidden',
            '.invisible',
            '.sr-only',
            '[style*="display: none"]',
            '[style*="visibility: hidden"]'
        ];

        hideSelectors.forEach(selector => {
            try {
            const elements = container.querySelectorAll(selector);
            elements.forEach(element => {
                    if (element.style.display !== 'none' && 
                        element.style.visibility !== 'hidden') {
                    elementsToHide.push({
                        element: element,
                            originalDisplay: element.style.display,
                            originalVisibility: element.style.visibility
                    });
                    element.style.display = 'none';
                }
            });
            } catch (error) {
                console.warn(`Erro ao aplicar seletor ${selector}:`, error);
            }
        });
        
        console.log(`Escondidos ${elementsToHide.length} elementos para captura`);
        return elementsToHide;
    }

    /**
     * Restaura elementos escondidos ap√≥s a captura
     * @param {Array} elementsToShow - Elementos a serem restaurados
     */
    showUIElements(elementsToShow) {
        elementsToShow.forEach(({ element, originalDisplay, originalVisibility, originalOpacity }) => {
            if (originalDisplay !== undefined) {
            element.style.display = originalDisplay;
            }
            if (originalVisibility !== undefined) {
                element.style.visibility = originalVisibility;
            }
            if (originalOpacity !== undefined) {
                element.style.opacity = originalOpacity;
            }
        });
        
        // Restaura estilos originais de captura se existirem
        elementsToShow.forEach(({ element }) => {
            if (element._originalCaptureStyle) {
                Object.assign(element.style, element._originalCaptureStyle);
                delete element._originalCaptureStyle;
            }
        });
        
        console.log(`üîì Restaurados ${elementsToShow.length} elementos ap√≥s captura`);
    }

    /**
     * Obt√©m dimens√µes do PDF baseadas no formato
     * @param {string} format - Formato do papel (A4, A3, etc.)
     * @param {string} orientation - Orienta√ß√£o (portrait, landscape)
     * @returns {Object} Dimens√µes em mm
     */
    getPDFDimensions(format, orientation) {
        const dimensions = {
            A4: { width: 210, height: 297 },
            A3: { width: 297, height: 420 },
            A5: { width: 148, height: 210 },
            letter: { width: 216, height: 279 }
        };

        let dim = dimensions[format.toUpperCase()] || dimensions.A4;
        
        if (orientation === 'landscape') {
            return { width: dim.height, height: dim.width };
        }
        
        return dim;
    }

    /**
     * Valida se o navegador suporta as funcionalidades necess√°rias
     * @returns {Object} Status de compatibilidade
     */
    checkBrowserCompatibility() {
        const compatibility = {
            domToImage: typeof domtoimage !== 'undefined',
            canvas: !!document.createElement('canvas').getContext,
            download: 'download' in document.createElement('a'),
            print: typeof window.print === 'function'
        };

        compatibility.supported = Object.values(compatibility).every(Boolean);
        
        return compatibility;
    }
}

// Inst√¢ncia singleton
export const printService = new PrintService();

// M√©todos de teste para debug (podem ser removidos em produ√ß√£o)
if (typeof window !== 'undefined') {
    window.debugPrint = {
        detectModules: () => printService.detectModules(),
        visualizeElements: () => printService.debugVisualizeElements(),
        clearDebug: () => printService.clearDebugVisualization(),
        testCapture: async (moduleIndex = 0) => {
            const modules = printService.detectModules();
            if (modules[moduleIndex]) {
                const capture = await printService.captureElement(modules[moduleIndex].element);
                const img = new Image();
                img.src = capture;
                img.style.maxWidth = '500px';
                img.style.border = '2px solid red';
                document.body.appendChild(img);
                return capture;
            }
            console.log('M√≥dulo n√£o encontrado:', moduleIndex);
        },
        // Novos m√©todos de debug para fluxo
        detectFlow: () => printService.detectGondolaFlow(),
        clearFlowCache: () => printService.clearFlowCache(),
        getFlowCache: () => ({
            flow: printService._detectedFlow,
            timestamp: printService._flowDetectionTimestamp,
            timeout: printService._flowCacheTimeout
        }),
        // M√©todos de valida√ß√£o
        validateModules: () => {
            const modules = printService.detectModules();
            return printService.validateModuleDetection(modules);
        },
        // M√©todo para debug completo
        debugComplete: () => {
            console.log('=== DEBUG COMPLETO DO PRINTSERVICE ===');
            const flow = printService.detectGondolaFlow();
            const modules = printService.detectModules();
            const validation = printService.validateModuleDetection(modules);
            
            console.log('Fluxo detectado:', flow);
            console.log('M√≥dulos detectados:', modules.length);
            console.log('Valida√ß√£o:', validation);
            
            return {
                flow,
                modules,
                validation,
                cache: {
                    flow: printService._detectedFlow,
                    timestamp: printService._flowDetectionTimestamp
                }
            };
        }
    };
}